const formOrderOptionValueToInput = { TG: '<input placeholder="Имя пользователя Telegram" type="text" name="connection-type-value" required>', VK: '<input placeholder="Ссылка на страницу VK" type="text" name="connection-type-value" required>', "e-mail": '<input placeholder="Ваш e-mail" type="email" name="connection-type-value" required>', phone: '<input placeholder="Ваш телефон" type="text" name="connection-type-value" required>' }; $(() => { let n = localStorage.getItem("page-theme"); n == null && (n = "theme-light"); setTheme(n); $(".navbar-hamburger").click(() => { $(".navbar-elements").css("visibility", "visible").addClass("stretchWidthAndHeightAnimClass") }); $("#nav-menu-close").click(() => { $(".navbar-elements").removeClass("stretchWidthAndHeightAnimClass"), setTimeout(() => { $(".navbar-elements").addClass("stretchWidthAndHeightAnimClass reverse") }, 2), setTimeout(() => { $(".navbar-elements").css("visibility", "hidden"), $(".navbar-elements").removeClass("stretchWidthAndHeightAnimClass"), $(".navbar-elements").removeClass("reverse") }, 500) }); $("#color-mode-switcher").click(n => { n.preventDefault(), $("html").toggleClass("theme-light theme-dark"), localStorage.setItem("page-theme", $("html").attr("class")) }); setMakeOrderListeners(); setListListeners(); $(".my-portfolio-cards").mouseleave(() => { destroyPopup() }); $(".my-portfolio-cards").slick() }); const setTheme = n => { $("html").removeClass(), $("html").addClass(n) }, setMakeOrderListeners = () => { $('button[data-action="openOrderForm"]').click(() => { destroyModal(), openModal("form-order").done(setOrderFormListeners) }) }, setPortfolioCardsListener = () => { $(".my-portfolio-card").mouseenter(n => { let t = n.target; $(t).hasClass("my-portfolio-card") || (t = $(t).parents(".my-portfolio-card")); loadPopup("portfolio-popup", t).done(() => { setPopupMouseLeave(); setMakeOrderListeners(); const n = $(t).children("h4.card-headline"), i = $(t).children('input[type="hidden"][name="content"]'), r = $(t).children('input[type="hidden"][name="link"]'), u = $(t).children("img"); $(".portfolio-popup-content").children("h4.portfolio-popup__headline").text($(n).text()); $(".portfolio-popup-content").children(".popup-link").attr("href", $(r).val()); $(".portfolio-popup-content").children(".typeset").text($(i).val()); $(".portfolio-popup-content").children(".portfolio-popup__image").attr("src", $(u).attr("src")) }) }) }, setListListeners = () => { $(".list-and-photo li").mouseenter(n => { $(n.target).parents(".list-and-photo").children(".list-and-photo__img").empty(); const t = $(n.target).data("imgFile"), i = `<img src="${t}" alt="" />`; $(n.target).parents(".list-and-photo").children(".list-and-photo__img").append($(i).addClass("fade-in")) }) }, setOrderFormListeners = () => {
    if ($('input[name="results-input"]').length) {
        const n = `Нужно сделать сайт: ${getFromResults("site-type") === "other" ? getFromResults("site-type-desc") : siteTypes[getFromResults("site-type")]} на ${getFromResults("site-total-pages")} страниц.
Дизайн макет${getFromResults("site-has-design") ? " уже имеется" : "а нет."}
Сайт ${getFromResults("site-design-has-adaptive") || getFromResults("site-need-adaptive") ? "" : "не "}должен быть адаптивным. ${getFromResults("site-need-offcanvas") ? "Имеются" : "Не имеются"} модальные окна.
Бэкенд для сайта ${getFromResults("site-need-backend") ? "должен быть: " + backendTypes[getFromResults("site-backend-type")] : "не нужен"}`; $('textarea[name="description"]').val(n)
    } $("#connectionType").change(n => { $('input[name="connection-type-value"]').remove(); const t = n.target.selectedOptions[0].value, i = formOrderOptionValueToInput[t]; $(i).show().insertAfter(".connection-type-div") }); $("#orderFormSubmit").click(n => { n.preventDefault(); const t = {}; let i = !1; const r = $("#order-form-name"), u = $(r).val(); if (u.trim() == "" ? (showUnFilled(r), i = !0) : t.name = u, $("#connectionType option").filter(":selected").val() == "none") showUnFilled($("#connectionType")), i = !0; else { t.connectionType = $("#connectionType option").filter(":selected").val(); const n = $('input[name="connection-type-value"]'); $(n).val().trim() == "" ? (showUnFilled(n), i = !0) : t.connectionTypeValue = $(n).val().trim() } t.description = $("#order-form-description").val(); i || (sendOrder(t), openModal("form-confirmed").done(() => { $(".form-confirmed>button").click(() => { destroyModal() }) })) })
}, setPopupMouseLeave = () => { $(".popup").mouseleave(() => { destroyPopup() }) }, showUnFilled = n => { setTimeout(() => { $(n).addClass("shakeAnimClass") }, 5), $(n).removeClass("shakeAnimClass") }, sendOrder = n => { console.log(n) }, openModal = n => $.get(`${additional_vars.template_uri}/assets/modals/${n}.html`, n => { const t = `<div class="modal-close"><img src="${additional_vars.template_uri}/assets/img/cross.png" alt="" /></div>`; $("body").append($(n).addClass("modal fade-in").append(t)); $(".modal-close").click(() => { destroyModal() }) }), loadPopup = (n, t) => $.get(`${additional_vars.template_uri}/assets/popups/${n}.html`, n => { destroyPopup(), $(t).append($(n).addClass("popup fade-in")) }), destroyModal = () => { $(".modal").remove() }, destroyPopup = () => { $(".popup").remove() };